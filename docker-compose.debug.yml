services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: ssr_dp_2025_db
    environment:
      POSTGRES_DB: ssr_dp_2025
      POSTGRES_USER: ssr_dp_2025_user
      POSTGRES_PASSWORD: supsersecret
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - donation_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ssr_dp_2025_user -d ssr_dp_2025"]
      interval: 60s
      timeout: 5s
      retries: 5

  # Backend API (Debug Mode)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ssr_dp_2025_backend_debug
    environment:
      DATABASE_URL: postgresql://ssr_dp_2025_user:supsersecret@db:5432/ssr_dp_2025
      SECRET_KEY: your-secret-key-change-in-production
      JWT_SECRET_KEY: jwt-secret-key-change-in-production
      FLASK_ENV: development
      FLASK_DEBUG: "1"
      PYTHONUNBUFFERED: "1"
    ports:
      - "5000:5000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - donation_network
    volumes:
      - ./backend:/app
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        python wait_for_db.py &&
        echo 'Initializing database...' &&
        python init_db.py &&
        echo 'Adding users...' &&
        python add_multiple_users.py &&
        echo 'Running comprehensive verification...' &&
        python verify_setup.py &&
        echo 'Starting Flask application in DEBUG mode...' &&
        python -u run.py
      "

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ssr_dp_2025_frontend
    environment:
      VITE_API_URL: http://localhost:5000/api/v1
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - donation_network
    volumes:
      - ./frontend:/app
      - /app/node_modules

volumes:
  postgres_data:

networks:
  donation_network:
    driver: bridge
